{"version":3,"sources":["logo.svg","CalcComponents/themeContext.js","CalcComponents/NumberBtn.js","CalcComponents/CalcNumPad.js","CalcComponents/CalcScreen.js","CalcComponents/CalcBody.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ThemeContext","React","createContext","NumberBtn","props","useContext","theme","toggleTheme","type","className","style","order","btnPlace","onClick","e","btnValue","console","log","numPadClicked","CalcNumPad","calcBtnValues","map","btnLabel","index","key","CalcScreen","numValue","CalcBody","useState","numOnScreen","setNumOnScreen","requestNumOnScreen","setRequestNumOnScreen","mode","setMode","total","setTotal","numIsSet","setNumIsSet","useEffect","keyValue","newNum","Number","App","Boolean","window","location","hostname","match","ReactDOM","render","Provider","value","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4IAAAA,EAAOC,QAAU,IAA0B,kC,oHCCrCC,EAAeC,IAAMC,gBC2BZC,MAvBf,SAAmBC,GAAQ,IAAD,EACMC,qBAAWL,GAAlCM,EADiB,EACjBA,MAAOC,EADU,EACVA,YASf,OACC,4BACCC,KAAK,SACLC,UAAWH,EACXI,MAAO,CAAEC,MAAOP,EAAMQ,UACtBC,QAAS,SAACC,GAZZ,IAAqBC,IAaNX,EAAMW,SAXpBC,QAAQC,IAAI,gBAAkBF,EAAW,IAAK,qBAAuBT,GACrEF,EAAMc,cAAcH,GACpBR,MAWEH,EAAMW,WCYKI,MAhCf,SAAoBf,GAEhB,IAAMgB,EAAgB,CAClB,CAACL,SAAS,IAAKH,SAAS,GACxB,CAACG,SAAS,IAAKH,SAAS,IACxB,CAACG,SAAS,IAAKH,SAAS,IACxB,CAACG,SAAS,IAAKH,SAAS,GACxB,CAACG,SAAS,IAAKH,SAAS,GACxB,CAACG,SAAS,IAAKH,SAAS,GACxB,CAACG,SAAS,IAAKH,SAAS,GACxB,CAACG,SAAS,IAAKH,SAAS,GACxB,CAACG,SAAS,IAAKH,SAAS,GACxB,CAACG,SAAS,IAAKH,SAAS,IACxB,CAACG,SAAS,IAAKH,SAAS,IACxB,CAACG,SAAS,IAAKH,SAAS,IACxB,CAACG,SAAS,IAAKH,SAAS,GACxB,CAACG,SAAS,IAAKH,SAAS,GACxB,CAACG,SAAS,IAAKH,SAAS,IACxB,CAACG,SAAS,OAAKH,SAAS,KAU5B,OAAO,yBAAKH,UAAU,cAAf,IANIW,EAAcC,KAAI,SAACC,EAAUC,GAAU,OAAO,kBAAC,EAAD,CACGC,IAAKF,EAASV,SACdG,SAAUO,EAASP,SACnBH,SAAUU,EAASV,SACnBM,cAAed,EAAMc,mBAE1E,MCxBIO,MALf,SAAoBrB,GAChB,OAAQ,yBAAKK,UAAU,cAAcL,EAAMsB,WC8HhCC,MA5Hf,WAAoB,IAAD,EAEuBC,mBAAS,GAFhC,mBAERC,EAFQ,KAEKC,EAFL,OAGqCF,mBAAS,GAH9C,mBAGRG,EAHQ,KAGYC,EAHZ,OAISJ,mBAAS,UAJlB,mBAIRK,EAJQ,KAIFC,EAJE,OAKWN,mBAAS,GALpB,mBAKRO,EALQ,KAKDC,EALC,OAMiBR,oBAAS,GAN1B,mBAMRS,EANQ,KAMEC,EANF,KAkHf,OAzGAC,qBACI,WACIvB,QAAQC,IAAI,yDACZD,QAAQC,IAAI,iDAAiDc,GAE1DA,EAAmB,MAAQA,GAAoB,MAC9Cf,QAAQC,IAAI,qBACE,IAAXoB,GACCrB,QAAQC,IAAI,cACZa,EAAe,QAEfd,QAAQC,IAAI,oCAGhBa,EAAeC,GAEnBf,QAAQC,IAAI,SAASgB,GACrBjB,QAAQC,IAAI,oBAAoBkB,KAEvC,CAACJ,IAuFE,yBAAKtB,UAAU,YACX,kBAAC,EAAD,CAAYiB,SAAUG,IACtB,yBAAKpB,UAAU,gBACX,kBAAC,EAAD,CAAYS,cAxFxB,SAAuBsB,GACnBxB,QAAQC,IAAI,wDACZD,QAAQC,IAAI,qBAAqBuB,EAAS,oBAAoBH,EAAS,WAAWJ,GAClF,IAAIQ,EAAS,EACE,MAAXD,GAA6B,MAAXA,GAA6B,MAAXA,GAA6B,SAAXA,GAA6B,MAAXA,GAChD,MAATP,EACJI,GACCI,EAASC,OAAOb,GAChBb,QAAQC,IAAI,cAEZD,QAAQC,IAAI,iBAAiBkB,EAAM,sBAAsBN,GACzDY,EAASC,OAAOP,GAAOO,OAAOb,IAElB,MAATI,EACJI,GACCI,EAASC,OAAOb,GAChBb,QAAQC,IAAI,cAEhBD,QAAQC,IAAI,iBAAiBkB,EAAM,sBAAsBN,GACzDY,EAASC,OAAOP,GAAOO,OAAOb,IAEd,MAATI,EACJI,GACCI,EAASC,OAAOb,GAChBb,QAAQC,IAAI,cAEhBD,QAAQC,IAAI,iBAAiBkB,EAAM,sBAAsBN,GACzDY,EAASC,OAAOP,GAAOO,OAAOb,IAEd,SAATI,EACJI,GACCI,EAASC,OAAOb,GAChBb,QAAQC,IAAI,cAEhBD,QAAQC,IAAI,iBAAiBkB,EAAM,sBAAsBN,GACzDY,EAASC,OAAOP,GAAOO,OAAOb,IAEd,WAATI,EACPQ,EAASC,OAAOb,GACA,MAATI,IACPQ,EAASC,OAAOb,IAEpBK,EAAQM,GAAWxB,QAAQC,IAAI,YAAYuB,GAC3CJ,EAASK,GAASzB,QAAQC,IAAI,aAAawB,GAC3CH,GAAY,GAAOtB,QAAQC,IAAI,+BAA+BoB,GAC9DL,EAAsBU,OAAOD,KAEf,MAAXD,GACHxB,QAAQC,IAAI,eACZmB,EAAS,GAAIpB,QAAQC,IAAI,eACzBe,EAAsB,GAAGhB,QAAQC,IAAI,yBACrCqB,GAAY,GAAMtB,QAAQC,IAAI,qBAC9BiB,EAAQ,UAAUlB,QAAQC,IAAI,uBAE9BD,QAAQC,IAAI,yBAA4BoB,IACzB,IAAXA,GACAI,EAA8B,GAApBC,OAAOb,GAAiBa,OAAOF,GACzCR,EAAsBU,OAAOD,MACX,IAAXJ,IACPC,GAAY,GACZN,EAAsBU,OAAOF,YC7ElCG,MARf,WACC,OACC,yBAAKlC,UAAU,OACd,kBAAC,EAAD,QCDiBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,mBPLJ,SAA8B9C,GAAQ,IAAD,EACpBwB,mBAAS,aAAlBtB,EAD6B,oBAOpC,OACC,kBAACN,EAAamD,SAAd,CAAuBC,MAAO,CAAE9C,QAAOC,YALxC,WACCS,QAAQC,IAAIX,MAI2CF,EAAMiD,YOH3D,KACI,kBAAC,EAAD,OAENC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cabe6c77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState } from \"react\";\r\nconst ThemeContext = React.createContext();\r\n\r\nfunction ThemeContextProvider(props) {\r\n\tconst [theme] = useState(\"numberBtn\");\r\n\r\n\tfunction toggleTheme() {\r\n\t\tconsole.log(theme);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ThemeContext.Provider value={{ theme, toggleTheme }}>{props.children}</ThemeContext.Provider>\r\n\t);\r\n}\r\n\r\nexport { ThemeContextProvider, ThemeContext };\r\n","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"./themeContext\";\r\n\r\nlet onScreenNum = 0.0;\r\n\r\nfunction NumberBtn(props) {\r\n\tconst { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n\tfunction btnClick(e, btnValue) {\r\n\t\t// console.log(\"It's-a-meee, \"+btnValue+\".\"/* ,e */ , \"target: \"+e.target);\r\n\t\tconsole.log(\"It's-a-meee, \" + btnValue + \".\", \"Theme context is: \" + theme);\r\n\t\tprops.numPadClicked(btnValue);\r\n\t\ttoggleTheme();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<button\r\n\t\t\ttype='button'\r\n\t\t\tclassName={theme}\r\n\t\t\tstyle={{ order: props.btnPlace }}\r\n\t\t\tonClick={(e) => {\r\n\t\t\t\tbtnClick(e, props.btnValue);\r\n\t\t\t}}>\r\n\t\t\t{props.btnValue}\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default NumberBtn;\r\n","import React from \"react\";\r\nimport NumberBtn from \"./NumberBtn.js\";\r\n\r\nfunction CalcNumPad(props){\r\n\r\n    const calcBtnValues = [ \r\n        {btnValue:\"1\", btnPlace:9},\r\n        {btnValue:\"2\", btnPlace:10},\r\n        {btnValue:\"3\", btnPlace:11},\r\n        {btnValue:\"4\", btnPlace:5},\r\n        {btnValue:\"5\", btnPlace:6},\r\n        {btnValue:\"6\", btnPlace:7},\r\n        {btnValue:\"7\", btnPlace:1},\r\n        {btnValue:\"8\", btnPlace:2},\r\n        {btnValue:\"9\", btnPlace:3},\r\n        {btnValue:\"0\", btnPlace:13},\r\n        {btnValue:\"C\", btnPlace:14},\r\n        {btnValue:\"=\", btnPlace:15},\r\n        {btnValue:\"+\", btnPlace:4},\r\n        {btnValue:\"-\", btnPlace:8},\r\n        {btnValue:\"x\", btnPlace:12},\r\n        {btnValue:\"รท\", btnPlace:16}\r\n    ];\r\n    \r\n    const renderMe = () => {\r\n        return calcBtnValues.map((btnLabel, index)=>{ return <NumberBtn \r\n                                                                key={btnLabel.btnPlace} \r\n                                                                btnValue={btnLabel.btnValue} \r\n                                                                btnPlace={btnLabel.btnPlace} \r\n                                                                numPadClicked={props.numPadClicked}/>});\r\n    };\r\n    return <div className=\"calcNumPad\"> {renderMe()} </div>\r\n    \r\n};\r\n\r\nexport default CalcNumPad;\r\n","import React from \"react\";\r\n\r\nfunction CalcScreen(props) {\r\n    return  <div className=\"calcScreen\">{props.numValue}</div>\r\n}\r\n\r\n\r\nexport default CalcScreen;","import React, {useState, useEffect} from \"react\";\r\nimport CalcNumPad from \"./CalcNumPad.js\"\r\nimport CalcScreen from \"./CalcScreen.js\"\r\nimport calculate from \"./CalcOperations.js\"\r\n\r\nfunction CalcBody(){\r\n    \r\n    const [numOnScreen, setNumOnScreen] = useState(0);\r\n    const [requestNumOnScreen, setRequestNumOnScreen] = useState(0);\r\n    const [mode, setMode] = useState(\"cleard\");\r\n    const [total, setTotal] = useState(0);\r\n    const [numIsSet, setNumIsSet] = useState(false);\r\n    //const [isFinished, setIsFinished] = useState(false);\r\n\r\n    useEffect(\r\n        ()=>{\r\n            console.log(\" - - - - - - - - - - - - - - - - - - - - - -  - - - -\" ); \r\n            console.log(\" USE-EFFECT !  requestNumOnScreen was set to: \"+requestNumOnScreen); \r\n            // Is the new number requested for screen too big for it?\r\n            if(requestNumOnScreen>9999 || requestNumOnScreen<-9999){\r\n                console.log(\"too big or small\");\r\n                if(numIsSet===true){\r\n                    console.log(\"num is SET\")\r\n                    setNumOnScreen(\"err\");    \r\n                } else {\r\n                    console.log(\"num is NOT SET, no more numbers\")\r\n                }\r\n            } else {\r\n                setNumOnScreen(requestNumOnScreen);    \r\n            }\r\n            console.log(\"mode: \"+mode);\r\n            console.log(\"so far total is: \"+total);\r\n        }\r\n    ,[requestNumOnScreen]);\r\n\r\n    function numPadClicked(keyValue){\r\n        console.log(\"----------------------------------------------------\");\r\n        console.log(\"keyValue clicked: \"+keyValue+\" , Now numIsSet: \"+numIsSet+\", mode: \"+mode);\r\n        let newNum = 0;\r\n        if (keyValue===\"+\" || keyValue===\"-\" || keyValue===\"x\" || keyValue===\"รท\" || keyValue===\"=\") {\r\n                if        (mode === \"+\") {\r\n                    if(numIsSet){\r\n                        newNum = Number(numOnScreen);\r\n                        console.log(\"Locked !\")\r\n                    } else {\r\n                        console.log(\"!!! total is: \"+total+\" , numOnScreen is: \"+numOnScreen);\r\n                        newNum = Number(total)+Number(numOnScreen);\r\n                    };\r\n                } else if (mode === \"-\") {\r\n                    if(numIsSet){\r\n                        newNum = Number(numOnScreen);\r\n                        console.log(\"Locked !\")\r\n                    } else {\r\n                    console.log(\"!!! total is: \"+total+\" , numOnScreen is: \"+numOnScreen);\r\n                    newNum = Number(total)-Number(numOnScreen);\r\n                    };\r\n                } else if (mode === \"x\") {\r\n                    if(numIsSet){\r\n                        newNum = Number(numOnScreen);\r\n                        console.log(\"Locked !\")\r\n                    } else {\r\n                    console.log(\"!!! total is: \"+total+\" , numOnScreen is: \"+numOnScreen);\r\n                    newNum = Number(total)*Number(numOnScreen);\r\n                    };\r\n                } else if (mode === \"รท\") {\r\n                    if(numIsSet){\r\n                        newNum = Number(numOnScreen);\r\n                        console.log(\"Locked !\")\r\n                    } else {\r\n                    console.log(\"!!! total is: \"+total+\" , numOnScreen is: \"+numOnScreen);\r\n                    newNum = Number(total)/Number(numOnScreen);\r\n                    }\r\n                } else if (mode === \"cleard\") {\r\n                    newNum = Number(numOnScreen);\r\n                } else if (mode === \"=\") {\r\n                    newNum = Number(numOnScreen);\r\n                }\r\n                setMode(keyValue); console.log(\"setMode: \"+keyValue);\r\n                setTotal(newNum); console.log(\"setTotal: \"+newNum);\r\n                setNumIsSet(true); console.log(\"setNumIsSet: to true, but---\"+numIsSet);\r\n                setRequestNumOnScreen(Number(newNum));\r\n                // if (keyValue===\"=\") { setIsFinished(true); console.log(\"finished\") }\r\n        } else if (keyValue===\"C\") {\r\n                console.log(\" C clicked \")\r\n                setTotal(0); console.log(\"setTotal(0)\");\r\n                setRequestNumOnScreen(0);console.log(\"requestNumOnScreen(0)\");\r\n                setNumIsSet(true);console.log(\"setNumIsSet(true)\");\r\n                setMode(\"cleard\");console.log(\"setMode( cleard )\");\r\n        } else {\r\n                console.log(\"number!\"+\" num is set? : \"+numIsSet);\r\n                if (numIsSet===false){\r\n                    newNum = (Number(numOnScreen)*10)+Number(keyValue);\r\n                    setRequestNumOnScreen(Number(newNum));\r\n                } else if (numIsSet===true) {\r\n                    setNumIsSet(false);\r\n                    setRequestNumOnScreen(Number(keyValue));\r\n                }\r\n        }\r\n        /* switch (keyValue){\r\n            case \"+\"||\"-\" :\r\n                 console.log(\" + or - \");\r\n            break;\r\n            case \"0\" : \r\n                console.log(\"number 0\")\r\n                let newNum = (Number(numOnScreen)*10)+Number(keyValue);\r\n                setRequestNumOnScreen(newNum);\r\n            break;\r\n            case \"1\" : \r\n                let newNum = (Number(numOnScreen)*10)+Number(keyValue);\r\n                setRequestNumOnScreen(newNum);\r\n            break;\r\n        }; */\r\n    };\r\n\r\n       /*  let numOnScreenWas = numOnScreen;\r\n       let operatorOnWas = operatorOn;\r\n       setNumOnScreen( calcEval(keyValue, numOnScreenWas, operatorOnWas, setTotal) ); //IS THIS GOOD PRACTICE? (with passing seState) ??? DENISE!!!\r\n       console.log(\"total is set to: \"+total) */\r\n    \r\n    return(\r\n        <div className=\"calcBody\">\r\n            <CalcScreen numValue={numOnScreen}/>\r\n            <div className=\"numInterface\">\r\n                <CalcNumPad numPadClicked={numPadClicked} />\r\n            </div>\r\n        </div>    \r\n    );\r\n};\r\n\r\nexport default CalcBody;\r\n\r\n// {calcBtnValues.map((btnLabel) => {\r\n//     return <NumberBtn key={btnLabel} btnValue={btnLabel} />;\r\n// })}\r\n\r\n\r\n// This makes sure the btn clicked is Nan  <<<<< Dosnt work because of Number.isNaN - +/-/X/=  comes out as NUMBERS!!! \r\n// --------------------------------------------------------------------------------------------------------------------\r\n\r\n/* case Number.isNaN(btnValue):     <<<<< Dosnt work because of Number.isNaN - +/-/X/=  comes out as NUMBERS!!! \r\n                console.log(\"is NaN\");      \r\n                switch(btnValue) {\r\n                    case \"+\":\r\n                        console.log(\"+ function\")\r\n                    break;\r\n                    case \"-\":\r\n                        console.log(\"- function\")\r\n                    break;\r\n                    case \"X\":\r\n                        console.log(\"x function\")\r\n                    break;\r\n                    case \"รท\": \r\n                        console.log(\"รท function\")\r\n                    break;                \r\n                    case \"=\": \r\n                        console.log(\"= function\")\r\n                    break;\r\n                    case \"รท\": \r\n                        console.log(\". function\")\r\n                    break;\r\n                    default:\r\n                        console.log(\"OOPS, Somthing else\")\r\n                }\r\n            break; */","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CalcBody from \"./CalcComponents/CalcBody.js\";\n\nconst meta = {\n\ttitle: \"Calculator V.2\",\n\tauthor: \"Ori\",\n};\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<CalcBody />\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n/*\nOLD STUFF\n---------\n      \n      {<header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> }\n\n\n\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ThemeContextProvider} from \"./CalcComponents/themeContext\"\n\nReactDOM.render(\n    <ThemeContextProvider>\n        <App />\n    </ThemeContextProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}